name: MERN CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-backend:${{ github.sha }} ./server
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-backend:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/mern-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/mern-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-backend:latest

      - name: Build & Push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-frontend:${{ github.sha }} ./client
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-frontend:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/mern-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/mern-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-frontend:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || '22' }}
          script: |
            # Tạo thư mục app nếu chưa có
            mkdir -p ~/app
            cd ~/app
            
            # Cài đặt Docker nếu chưa có
            if ! command -v docker &> /dev/null; then
              apt update
              apt install -y ca-certificates curl gnupg lsb-release
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt update
              apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            fi
            
            # Cài đặt Docker Compose standalone nếu chưa có
            if ! command -v docker-compose &> /dev/null; then
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            fi
            
                        # Tạo file docker-compose.prod.yml
            cat > docker-compose.prod.yml << 'EOF'
            version: "3.8"
            services:
              backend:
                image: ${{ secrets.DOCKER_USERNAME }}/mern-backend:latest
                restart: unless-stopped
                environment:
                  - MONGO_URI=${{ secrets.MONGODB_URI }}
                  - PORT=4000
                  - NODE_ENV=production
                  - JWT_SECRET=${{ secrets.JWT_SECRET }}
                ports:
                  - "4000:4000"
                networks:
                  - app-network

              client:
                image: ${{ secrets.DOCKER_USERNAME }}/mern-frontend:latest
                restart: unless-stopped
                ports:
                  - "80:80"
                networks:
                  - app-network
                depends_on:
                  - backend

            networks:
              app-network:
                driver: bridge
            EOF
            
            # Login Docker Hub và deploy
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -f
            
            # Hiển thị status
            docker-compose -f docker-compose.prod.yml ps